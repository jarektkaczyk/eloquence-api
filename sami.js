(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '    <ul>                <li data-name="namespace:" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href=".html">Sofa</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Sofa_Eloquence" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence.html">Eloquence</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Sofa_Eloquence_AttributeCleaner" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/AttributeCleaner.html">AttributeCleaner</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Sofa_Eloquence_AttributeCleaner_Observer" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/AttributeCleaner/Observer.html">Observer</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Sofa_Eloquence_Contracts" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/Contracts.html">Contracts</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Sofa_Eloquence_Contracts_Relations" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/Contracts/Relations.html">Relations</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Sofa_Eloquence_Contracts_Relations_Joiner" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Relations/Joiner.html">Joiner</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_Relations_JoinerFactory" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Relations/JoinerFactory.html">JoinerFactory</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Sofa_Eloquence_Contracts_Searchable" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/Contracts/Searchable.html">Searchable</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Sofa_Eloquence_Contracts_Searchable_Parser" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Searchable/Parser.html">Parser</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_Searchable_ParserFactory" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Searchable/ParserFactory.html">ParserFactory</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_ArgumentBag" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/ArgumentBag.html">ArgumentBag</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_Attribute" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Attribute.html">Attribute</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_AttributeBag" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/AttributeBag.html">AttributeBag</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_CleansAttributes" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/CleansAttributes.html">CleansAttributes</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_Eloquence" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Eloquence.html">Eloquence</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_Mappable" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Mappable.html">Mappable</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_Metable" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Metable.html">Metable</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_Mutator" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Mutator.html">Mutator</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_Pipeline" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Pipeline.html">Pipeline</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Contracts_Validable" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Contracts/Validable.html">Validable</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Sofa_Eloquence_Metable" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/Metable.html">Metable</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Sofa_Eloquence_Metable_Attribute" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Metable/Attribute.html">Attribute</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Metable_AttributeBag" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Metable/AttributeBag.html">AttributeBag</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Metable_CreateMetaAttributesTable" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Metable/CreateMetaAttributesTable.html">CreateMetaAttributesTable</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Metable_InvalidMutatorException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Metable/InvalidMutatorException.html">InvalidMutatorException</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Metable_InvalidTypeException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Metable/InvalidTypeException.html">InvalidTypeException</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Sofa_Eloquence_Mutator" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/Mutator.html">Mutator</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Sofa_Eloquence_Mutator_InvalidCallableException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Mutator/InvalidCallableException.html">InvalidCallableException</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Mutator_Mutator" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Mutator/Mutator.html">Mutator</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Sofa_Eloquence_Pipeline" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/Pipeline.html">Pipeline</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Sofa_Eloquence_Pipeline_Pipeline" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Pipeline/Pipeline.html">Pipeline</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Sofa_Eloquence_Relations" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/Relations.html">Relations</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Sofa_Eloquence_Relations_Joiner" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Relations/Joiner.html">Joiner</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Relations_JoinerFactory" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Relations/JoinerFactory.html">JoinerFactory</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Sofa_Eloquence_Searchable" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/Searchable.html">Searchable</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Sofa_Eloquence_Searchable_Column" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Searchable/Column.html">Column</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Searchable_ColumnCollection" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Searchable/ColumnCollection.html">ColumnCollection</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Searchable_Parser" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Searchable/Parser.html">Parser</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Searchable_ParserFactory" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Searchable/ParserFactory.html">ParserFactory</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Searchable_Searchable" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Searchable/Searchable.html">Searchable</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Searchable_Subquery" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Searchable/Subquery.html">Subquery</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Sofa_Eloquence_Validable" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Sofa/Eloquence/Validable.html">Validable</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Sofa_Eloquence_Validable_Observer" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Sofa/Eloquence/Validable/Observer.html">Observer</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Sofa_Eloquence_ArgumentBag" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/ArgumentBag.html">ArgumentBag</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Builder" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/Builder.html">Builder</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Eloquence" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/Eloquence.html">Eloquence</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Mappable" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/Mappable.html">Mappable</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Metable" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/Metable.html">Metable</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Model" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/Model.html">Model</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Mutable" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/Mutable.html">Mutable</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_ServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/ServiceProvider.html">ServiceProvider</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Subquery" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/Subquery.html">Subquery</a>                    </div>                </li>                            <li data-name="class:Sofa_Eloquence_Validable" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Sofa/Eloquence/Validable.html">Validable</a>                    </div>                </li>                </ul></div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    {"type": "Namespace", "link": "Sofa.html", "name": "Sofa", "doc": "Namespace Sofa"},{"type": "Namespace", "link": "Sofa/Eloquence.html", "name": "Sofa\\Eloquence", "doc": "Namespace Sofa\\Eloquence"},{"type": "Namespace", "link": "Sofa/Eloquence/AttributeCleaner.html", "name": "Sofa\\Eloquence\\AttributeCleaner", "doc": "Namespace Sofa\\Eloquence\\AttributeCleaner"},{"type": "Namespace", "link": "Sofa/Eloquence/Contracts.html", "name": "Sofa\\Eloquence\\Contracts", "doc": "Namespace Sofa\\Eloquence\\Contracts"},{"type": "Namespace", "link": "Sofa/Eloquence/Contracts/Relations.html", "name": "Sofa\\Eloquence\\Contracts\\Relations", "doc": "Namespace Sofa\\Eloquence\\Contracts\\Relations"},{"type": "Namespace", "link": "Sofa/Eloquence/Contracts/Searchable.html", "name": "Sofa\\Eloquence\\Contracts\\Searchable", "doc": "Namespace Sofa\\Eloquence\\Contracts\\Searchable"},{"type": "Namespace", "link": "Sofa/Eloquence/Metable.html", "name": "Sofa\\Eloquence\\Metable", "doc": "Namespace Sofa\\Eloquence\\Metable"},{"type": "Namespace", "link": "Sofa/Eloquence/Mutator.html", "name": "Sofa\\Eloquence\\Mutator", "doc": "Namespace Sofa\\Eloquence\\Mutator"},{"type": "Namespace", "link": "Sofa/Eloquence/Pipeline.html", "name": "Sofa\\Eloquence\\Pipeline", "doc": "Namespace Sofa\\Eloquence\\Pipeline"},{"type": "Namespace", "link": "Sofa/Eloquence/Relations.html", "name": "Sofa\\Eloquence\\Relations", "doc": "Namespace Sofa\\Eloquence\\Relations"},{"type": "Namespace", "link": "Sofa/Eloquence/Searchable.html", "name": "Sofa\\Eloquence\\Searchable", "doc": "Namespace Sofa\\Eloquence\\Searchable"},{"type": "Namespace", "link": "Sofa/Eloquence/Validable.html", "name": "Sofa\\Eloquence\\Validable", "doc": "Namespace Sofa\\Eloquence\\Validable"},
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_all", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::all", "doc": "&quot;Get array with all arguments.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_first", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::first", "doc": "&quot;Fetch first argument from the bag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_last", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::last", "doc": "&quot;Fetch last argument from the bag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_get", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::get", "doc": "&quot;Get argument with given key.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_isEmpty", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::isEmpty", "doc": "&quot;Determine whether the bag is empty.&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Attribute.html", "name": "Sofa\\Eloquence\\Contracts\\Attribute", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_newCollection", "name": "Sofa\\Eloquence\\Contracts\\Attribute::newCollection", "doc": "&quot;Create new AttributeBag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_getValue", "name": "Sofa\\Eloquence\\Contracts\\Attribute::getValue", "doc": "&quot;Get the meta attribute value.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_getKey", "name": "Sofa\\Eloquence\\Contracts\\Attribute::getKey", "doc": "&quot;Get the meta attribute key.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_setValue", "name": "Sofa\\Eloquence\\Contracts\\Attribute::setValue", "doc": "&quot;Set value of the meta attribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_castToString", "name": "Sofa\\Eloquence\\Contracts\\Attribute::castToString", "doc": "&quot;Handle casting value to string.&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/AttributeBag.html", "name": "Sofa\\Eloquence\\Contracts\\AttributeBag", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\AttributeBag", "fromLink": "Sofa/Eloquence/Contracts/AttributeBag.html", "link": "Sofa/Eloquence/Contracts/AttributeBag.html#method_set", "name": "Sofa\\Eloquence\\Contracts\\AttributeBag::set", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\AttributeBag", "fromLink": "Sofa/Eloquence/Contracts/AttributeBag.html", "link": "Sofa/Eloquence/Contracts/AttributeBag.html#method_getValue", "name": "Sofa\\Eloquence\\Contracts\\AttributeBag::getValue", "doc": "&quot;\n&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/CleansAttributes.html", "name": "Sofa\\Eloquence\\Contracts\\CleansAttributes", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\CleansAttributes", "fromLink": "Sofa/Eloquence/Contracts/CleansAttributes.html", "link": "Sofa/Eloquence/Contracts/CleansAttributes.html#method_getColumnListing", "name": "Sofa\\Eloquence\\Contracts\\CleansAttributes::getColumnListing", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\CleansAttributes", "fromLink": "Sofa/Eloquence/Contracts/CleansAttributes.html", "link": "Sofa/Eloquence/Contracts/CleansAttributes.html#method_getDirty", "name": "Sofa\\Eloquence\\Contracts\\CleansAttributes::getDirty", "doc": "&quot;\n&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html", "name": "Sofa\\Eloquence\\Contracts\\Eloquence", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Eloquence", "fromLink": "Sofa/Eloquence/Contracts/Eloquence.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html#method_getColumnsListing", "name": "Sofa\\Eloquence\\Contracts\\Eloquence::getColumnsListing", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Eloquence", "fromLink": "Sofa/Eloquence/Contracts/Eloquence.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html#method_hasColumn", "name": "Sofa\\Eloquence\\Contracts\\Eloquence::hasColumn", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Eloquence", "fromLink": "Sofa/Eloquence/Contracts/Eloquence.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html#method_parseMappedColumn", "name": "Sofa\\Eloquence\\Contracts\\Eloquence::parseMappedColumn", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Eloquence", "fromLink": "Sofa/Eloquence/Contracts/Eloquence.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html#method_getSearchableColumns", "name": "Sofa\\Eloquence\\Contracts\\Eloquence::getSearchableColumns", "doc": "&quot;\n&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Mappable.html", "name": "Sofa\\Eloquence\\Contracts\\Mappable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_hook", "name": "Sofa\\Eloquence\\Contracts\\Mappable::hook", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_getAttribute", "name": "Sofa\\Eloquence\\Contracts\\Mappable::getAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_setAttribute", "name": "Sofa\\Eloquence\\Contracts\\Mappable::setAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_hasMapping", "name": "Sofa\\Eloquence\\Contracts\\Mappable::hasMapping", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_getMappingForAttribute", "name": "Sofa\\Eloquence\\Contracts\\Mappable::getMappingForAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_getMaps", "name": "Sofa\\Eloquence\\Contracts\\Mappable::getMaps", "doc": "&quot;\n&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Metable.html", "name": "Sofa\\Eloquence\\Contracts\\Metable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_hook", "name": "Sofa\\Eloquence\\Contracts\\Metable::hook", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getAttribute", "name": "Sofa\\Eloquence\\Contracts\\Metable::getAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_setAttribute", "name": "Sofa\\Eloquence\\Contracts\\Metable::setAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getMetaAttributes", "name": "Sofa\\Eloquence\\Contracts\\Metable::getMetaAttributes", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getMetaAttributesArray", "name": "Sofa\\Eloquence\\Contracts\\Metable::getMetaAttributesArray", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_hasMeta", "name": "Sofa\\Eloquence\\Contracts\\Metable::hasMeta", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getMeta", "name": "Sofa\\Eloquence\\Contracts\\Metable::getMeta", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_setMeta", "name": "Sofa\\Eloquence\\Contracts\\Metable::setMeta", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getAllowedMeta", "name": "Sofa\\Eloquence\\Contracts\\Metable::getAllowedMeta", "doc": "&quot;\n&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Mutator.html", "name": "Sofa\\Eloquence\\Contracts\\Mutator", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mutator", "fromLink": "Sofa/Eloquence/Contracts/Mutator.html", "link": "Sofa/Eloquence/Contracts/Mutator.html#method_mutate", "name": "Sofa\\Eloquence\\Contracts\\Mutator::mutate", "doc": "&quot;Mutate value using provided methods.&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html", "name": "Sofa\\Eloquence\\Contracts\\Pipeline", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Pipeline", "fromLink": "Sofa/Eloquence/Contracts/Pipeline.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html#method_send", "name": "Sofa\\Eloquence\\Contracts\\Pipeline::send", "doc": "&quot;Specify the parcel to be passed through pipeline.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Pipeline", "fromLink": "Sofa/Eloquence/Contracts/Pipeline.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html#method_through", "name": "Sofa\\Eloquence\\Contracts\\Pipeline::through", "doc": "&quot;Specify the actions the parcel will be passed through.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Pipeline", "fromLink": "Sofa/Eloquence/Contracts/Pipeline.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html#method_with", "name": "Sofa\\Eloquence\\Contracts\\Pipeline::with", "doc": "&quot;Add the arguments to be passed along with the parcel.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Pipeline", "fromLink": "Sofa/Eloquence/Contracts/Pipeline.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html#method_to", "name": "Sofa\\Eloquence\\Contracts\\Pipeline::to", "doc": "&quot;Dispatch the parcel and call the final callback at the end.&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts\\Relations", "fromLink": "Sofa/Eloquence/Contracts/Relations.html", "link": "Sofa/Eloquence/Contracts/Relations/Joiner.html", "name": "Sofa\\Eloquence\\Contracts\\Relations\\Joiner", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Relations\\Joiner", "fromLink": "Sofa/Eloquence/Contracts/Relations/Joiner.html", "link": "Sofa/Eloquence/Contracts/Relations/Joiner.html#method_join", "name": "Sofa\\Eloquence\\Contracts\\Relations\\Joiner::join", "doc": "&quot;Join tables of the provided relations and return related model.&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts\\Relations", "fromLink": "Sofa/Eloquence/Contracts/Relations.html", "link": "Sofa/Eloquence/Contracts/Relations/JoinerFactory.html", "name": "Sofa\\Eloquence\\Contracts\\Relations\\JoinerFactory", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Relations\\JoinerFactory", "fromLink": "Sofa/Eloquence/Contracts/Relations/JoinerFactory.html", "link": "Sofa/Eloquence/Contracts/Relations/JoinerFactory.html#method_make", "name": "Sofa\\Eloquence\\Contracts\\Relations\\JoinerFactory::make", "doc": "&quot;Create new joiner instance.&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable", "fromLink": "Sofa/Eloquence/Contracts/Searchable.html", "link": "Sofa/Eloquence/Contracts/Searchable/Parser.html", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Contracts/Searchable/Parser.html", "link": "Sofa/Eloquence/Contracts/Searchable/Parser.html#method_parseQuery", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser::parseQuery", "doc": "&quot;Parse query string into separate words with wildcards if applicable.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Contracts/Searchable/Parser.html", "link": "Sofa/Eloquence/Contracts/Searchable/Parser.html#method_stripWildcards", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser::stripWildcards", "doc": "&quot;Strip wildcard tokens from the word.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Contracts/Searchable/Parser.html", "link": "Sofa/Eloquence/Contracts/Searchable/Parser.html#method_parseWeights", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser::parseWeights", "doc": "&quot;Parse searchable columns.&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable", "fromLink": "Sofa/Eloquence/Contracts/Searchable.html", "link": "Sofa/Eloquence/Contracts/Searchable/ParserFactory.html", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\ParserFactory", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable\\ParserFactory", "fromLink": "Sofa/Eloquence/Contracts/Searchable/ParserFactory.html", "link": "Sofa/Eloquence/Contracts/Searchable/ParserFactory.html#method_make", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\ParserFactory::make", "doc": "&quot;Create new parser instance.&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Validable.html", "name": "Sofa\\Eloquence\\Contracts\\Validable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getDirty", "name": "Sofa\\Eloquence\\Contracts\\Validable::getDirty", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_isValid", "name": "Sofa\\Eloquence\\Contracts\\Validable::isValid", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_enableValidation", "name": "Sofa\\Eloquence\\Contracts\\Validable::enableValidation", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_disableValidation", "name": "Sofa\\Eloquence\\Contracts\\Validable::disableValidation", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_validationEnabled", "name": "Sofa\\Eloquence\\Contracts\\Validable::validationEnabled", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_skipsValidation", "name": "Sofa\\Eloquence\\Contracts\\Validable::skipsValidation", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getValidationErrors", "name": "Sofa\\Eloquence\\Contracts\\Validable::getValidationErrors", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getInvalidAttributes", "name": "Sofa\\Eloquence\\Contracts\\Validable::getInvalidAttributes", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getValidator", "name": "Sofa\\Eloquence\\Contracts\\Validable::getValidator", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getUpdateRules", "name": "Sofa\\Eloquence\\Contracts\\Validable::getUpdateRules", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getCreateRules", "name": "Sofa\\Eloquence\\Contracts\\Validable::getCreateRules", "doc": "&quot;\n&quot;"},
            
            {"type": "Interface", "fromName": "Sofa\\Eloquence\\Searchable", "fromLink": "Sofa/Eloquence/Searchable.html", "link": "Sofa/Eloquence/Searchable/Searchable.html", "name": "Sofa\\Eloquence\\Searchable\\Searchable", "doc": "&quot;\n&quot;"},
                    
            
            {"type": "Class", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/ArgumentBag.html", "name": "Sofa\\Eloquence\\ArgumentBag", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\ArgumentBag", "fromLink": "Sofa/Eloquence/ArgumentBag.html", "link": "Sofa/Eloquence/ArgumentBag.html#method___construct", "name": "Sofa\\Eloquence\\ArgumentBag::__construct", "doc": "&quot;Create new bag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\ArgumentBag", "fromLink": "Sofa/Eloquence/ArgumentBag.html", "link": "Sofa/Eloquence/ArgumentBag.html#method_all", "name": "Sofa\\Eloquence\\ArgumentBag::all", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\ArgumentBag", "fromLink": "Sofa/Eloquence/ArgumentBag.html", "link": "Sofa/Eloquence/ArgumentBag.html#method_first", "name": "Sofa\\Eloquence\\ArgumentBag::first", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\ArgumentBag", "fromLink": "Sofa/Eloquence/ArgumentBag.html", "link": "Sofa/Eloquence/ArgumentBag.html#method_last", "name": "Sofa\\Eloquence\\ArgumentBag::last", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\ArgumentBag", "fromLink": "Sofa/Eloquence/ArgumentBag.html", "link": "Sofa/Eloquence/ArgumentBag.html#method_get", "name": "Sofa\\Eloquence\\ArgumentBag::get", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\ArgumentBag", "fromLink": "Sofa/Eloquence/ArgumentBag.html", "link": "Sofa/Eloquence/ArgumentBag.html#method_set", "name": "Sofa\\Eloquence\\ArgumentBag::set", "doc": "&quot;Set value at given key.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\ArgumentBag", "fromLink": "Sofa/Eloquence/ArgumentBag.html", "link": "Sofa/Eloquence/ArgumentBag.html#method_isEmpty", "name": "Sofa\\Eloquence\\ArgumentBag::isEmpty", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\AttributeCleaner", "fromLink": "Sofa/Eloquence/AttributeCleaner.html", "link": "Sofa/Eloquence/AttributeCleaner/Observer.html", "name": "Sofa\\Eloquence\\AttributeCleaner\\Observer", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\AttributeCleaner\\Observer", "fromLink": "Sofa/Eloquence/AttributeCleaner/Observer.html", "link": "Sofa/Eloquence/AttributeCleaner/Observer.html#method_saving", "name": "Sofa\\Eloquence\\AttributeCleaner\\Observer::saving", "doc": "&quot;Saving event handler.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/Builder.html", "name": "Sofa\\Eloquence\\Builder", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_search", "name": "Sofa\\Eloquence\\Builder::search", "doc": "&quot;Search through any columns on current table or any defined relations\nand return results ordered by search relevance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_getLikeOperator", "name": "Sofa\\Eloquence\\Builder::getLikeOperator", "doc": "&quot;Get driver-specific case insensitive like operator.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_prefixColumnsForJoin", "name": "Sofa\\Eloquence\\Builder::prefixColumnsForJoin", "doc": "&quot;Prefix selected columns with table name in order to avoid collisions.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_joinRelations", "name": "Sofa\\Eloquence\\Builder::joinRelations", "doc": "&quot;Join related tables.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_leftJoinRelations", "name": "Sofa\\Eloquence\\Builder::leftJoinRelations", "doc": "&quot;Left join related tables.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_rightJoinRelations", "name": "Sofa\\Eloquence\\Builder::rightJoinRelations", "doc": "&quot;Right join related tables.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_setParserFactory", "name": "Sofa\\Eloquence\\Builder::setParserFactory", "doc": "&quot;Set search query parser factory instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_setJoinerFactory", "name": "Sofa\\Eloquence\\Builder::setJoinerFactory", "doc": "&quot;Set the relations joiner factory instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_callParent", "name": "Sofa\\Eloquence\\Builder::callParent", "doc": "&quot;Call base Eloquent method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_get", "name": "Sofa\\Eloquence\\Builder::get", "doc": "&quot;Execute the query as a \&quot;select\&quot; statement.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_select", "name": "Sofa\\Eloquence\\Builder::select", "doc": "&quot;Set the columns to be selected.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_where", "name": "Sofa\\Eloquence\\Builder::where", "doc": "&quot;Add where constraint to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_orWhere", "name": "Sofa\\Eloquence\\Builder::orWhere", "doc": "&quot;Add an \&quot;or where\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereBetween", "name": "Sofa\\Eloquence\\Builder::whereBetween", "doc": "&quot;Add a where between statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_orWhereBetween", "name": "Sofa\\Eloquence\\Builder::orWhereBetween", "doc": "&quot;Add an or where between statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereNotBetween", "name": "Sofa\\Eloquence\\Builder::whereNotBetween", "doc": "&quot;Add a where not between statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_orWhereNotBetween", "name": "Sofa\\Eloquence\\Builder::orWhereNotBetween", "doc": "&quot;Add an or where not between statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereIn", "name": "Sofa\\Eloquence\\Builder::whereIn", "doc": "&quot;Add a \&quot;where in\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_orWhereIn", "name": "Sofa\\Eloquence\\Builder::orWhereIn", "doc": "&quot;Add an \&quot;or where in\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereNotIn", "name": "Sofa\\Eloquence\\Builder::whereNotIn", "doc": "&quot;Add a \&quot;where not in\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_orWhereNotIn", "name": "Sofa\\Eloquence\\Builder::orWhereNotIn", "doc": "&quot;Add an \&quot;or where not in\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereNull", "name": "Sofa\\Eloquence\\Builder::whereNull", "doc": "&quot;Add a \&quot;where null\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_orWhereNull", "name": "Sofa\\Eloquence\\Builder::orWhereNull", "doc": "&quot;Add an \&quot;or where null\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereNotNull", "name": "Sofa\\Eloquence\\Builder::whereNotNull", "doc": "&quot;Add a \&quot;where not null\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_orWhereNotNull", "name": "Sofa\\Eloquence\\Builder::orWhereNotNull", "doc": "&quot;Add an \&quot;or where not null\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereDate", "name": "Sofa\\Eloquence\\Builder::whereDate", "doc": "&quot;Add a \&quot;where date\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereDay", "name": "Sofa\\Eloquence\\Builder::whereDay", "doc": "&quot;Add a \&quot;where day\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereMonth", "name": "Sofa\\Eloquence\\Builder::whereMonth", "doc": "&quot;Add a \&quot;where month\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereYear", "name": "Sofa\\Eloquence\\Builder::whereYear", "doc": "&quot;Add a \&quot;where year\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_whereExists", "name": "Sofa\\Eloquence\\Builder::whereExists", "doc": "&quot;Add an exists clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_orderBy", "name": "Sofa\\Eloquence\\Builder::orderBy", "doc": "&quot;Add an \&quot;order by\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_latest", "name": "Sofa\\Eloquence\\Builder::latest", "doc": "&quot;Add an \&quot;order by\&quot; clause for a timestamp to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_oldest", "name": "Sofa\\Eloquence\\Builder::oldest", "doc": "&quot;Add an \&quot;order by\&quot; clause for a timestamp to the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_pluck", "name": "Sofa\\Eloquence\\Builder::pluck", "doc": "&quot;Pluck a single column from the database.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_aggregate", "name": "Sofa\\Eloquence\\Builder::aggregate", "doc": "&quot;Execute an aggregate function on the database.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_min", "name": "Sofa\\Eloquence\\Builder::min", "doc": "&quot;Retrieve the minimum value of a given column.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_max", "name": "Sofa\\Eloquence\\Builder::max", "doc": "&quot;Retrieve the maximum value of a given column.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_avg", "name": "Sofa\\Eloquence\\Builder::avg", "doc": "&quot;Retrieve the average of the values of a given column.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_sum", "name": "Sofa\\Eloquence\\Builder::sum", "doc": "&quot;Retrieve the sum of the values of a given column.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_count", "name": "Sofa\\Eloquence\\Builder::count", "doc": "&quot;Retrieve the \&quot;count\&quot; result of the query.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_lists", "name": "Sofa\\Eloquence\\Builder::lists", "doc": "&quot;Get an array with the values of a given column.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Builder", "fromLink": "Sofa/Eloquence/Builder.html", "link": "Sofa/Eloquence/Builder.html#method_newQuery", "name": "Sofa\\Eloquence\\Builder::newQuery", "doc": "&quot;Get a new instance of the Eloquence query builder.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_all", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::all", "doc": "&quot;Get array with all arguments.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_first", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::first", "doc": "&quot;Fetch first argument from the bag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_last", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::last", "doc": "&quot;Fetch last argument from the bag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_get", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::get", "doc": "&quot;Get argument with given key.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\ArgumentBag", "fromLink": "Sofa/Eloquence/Contracts/ArgumentBag.html", "link": "Sofa/Eloquence/Contracts/ArgumentBag.html#method_isEmpty", "name": "Sofa\\Eloquence\\Contracts\\ArgumentBag::isEmpty", "doc": "&quot;Determine whether the bag is empty.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Attribute.html", "name": "Sofa\\Eloquence\\Contracts\\Attribute", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_newCollection", "name": "Sofa\\Eloquence\\Contracts\\Attribute::newCollection", "doc": "&quot;Create new AttributeBag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_getValue", "name": "Sofa\\Eloquence\\Contracts\\Attribute::getValue", "doc": "&quot;Get the meta attribute value.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_getKey", "name": "Sofa\\Eloquence\\Contracts\\Attribute::getKey", "doc": "&quot;Get the meta attribute key.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_setValue", "name": "Sofa\\Eloquence\\Contracts\\Attribute::setValue", "doc": "&quot;Set value of the meta attribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Attribute", "fromLink": "Sofa/Eloquence/Contracts/Attribute.html", "link": "Sofa/Eloquence/Contracts/Attribute.html#method_castToString", "name": "Sofa\\Eloquence\\Contracts\\Attribute::castToString", "doc": "&quot;Handle casting value to string.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/AttributeBag.html", "name": "Sofa\\Eloquence\\Contracts\\AttributeBag", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\AttributeBag", "fromLink": "Sofa/Eloquence/Contracts/AttributeBag.html", "link": "Sofa/Eloquence/Contracts/AttributeBag.html#method_set", "name": "Sofa\\Eloquence\\Contracts\\AttributeBag::set", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\AttributeBag", "fromLink": "Sofa/Eloquence/Contracts/AttributeBag.html", "link": "Sofa/Eloquence/Contracts/AttributeBag.html#method_getValue", "name": "Sofa\\Eloquence\\Contracts\\AttributeBag::getValue", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/CleansAttributes.html", "name": "Sofa\\Eloquence\\Contracts\\CleansAttributes", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\CleansAttributes", "fromLink": "Sofa/Eloquence/Contracts/CleansAttributes.html", "link": "Sofa/Eloquence/Contracts/CleansAttributes.html#method_getColumnListing", "name": "Sofa\\Eloquence\\Contracts\\CleansAttributes::getColumnListing", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\CleansAttributes", "fromLink": "Sofa/Eloquence/Contracts/CleansAttributes.html", "link": "Sofa/Eloquence/Contracts/CleansAttributes.html#method_getDirty", "name": "Sofa\\Eloquence\\Contracts\\CleansAttributes::getDirty", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html", "name": "Sofa\\Eloquence\\Contracts\\Eloquence", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Eloquence", "fromLink": "Sofa/Eloquence/Contracts/Eloquence.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html#method_getColumnsListing", "name": "Sofa\\Eloquence\\Contracts\\Eloquence::getColumnsListing", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Eloquence", "fromLink": "Sofa/Eloquence/Contracts/Eloquence.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html#method_hasColumn", "name": "Sofa\\Eloquence\\Contracts\\Eloquence::hasColumn", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Eloquence", "fromLink": "Sofa/Eloquence/Contracts/Eloquence.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html#method_parseMappedColumn", "name": "Sofa\\Eloquence\\Contracts\\Eloquence::parseMappedColumn", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Eloquence", "fromLink": "Sofa/Eloquence/Contracts/Eloquence.html", "link": "Sofa/Eloquence/Contracts/Eloquence.html#method_getSearchableColumns", "name": "Sofa\\Eloquence\\Contracts\\Eloquence::getSearchableColumns", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Mappable.html", "name": "Sofa\\Eloquence\\Contracts\\Mappable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_hook", "name": "Sofa\\Eloquence\\Contracts\\Mappable::hook", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_getAttribute", "name": "Sofa\\Eloquence\\Contracts\\Mappable::getAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_setAttribute", "name": "Sofa\\Eloquence\\Contracts\\Mappable::setAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_hasMapping", "name": "Sofa\\Eloquence\\Contracts\\Mappable::hasMapping", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_getMappingForAttribute", "name": "Sofa\\Eloquence\\Contracts\\Mappable::getMappingForAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mappable", "fromLink": "Sofa/Eloquence/Contracts/Mappable.html", "link": "Sofa/Eloquence/Contracts/Mappable.html#method_getMaps", "name": "Sofa\\Eloquence\\Contracts\\Mappable::getMaps", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Metable.html", "name": "Sofa\\Eloquence\\Contracts\\Metable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_hook", "name": "Sofa\\Eloquence\\Contracts\\Metable::hook", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getAttribute", "name": "Sofa\\Eloquence\\Contracts\\Metable::getAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_setAttribute", "name": "Sofa\\Eloquence\\Contracts\\Metable::setAttribute", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getMetaAttributes", "name": "Sofa\\Eloquence\\Contracts\\Metable::getMetaAttributes", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getMetaAttributesArray", "name": "Sofa\\Eloquence\\Contracts\\Metable::getMetaAttributesArray", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_hasMeta", "name": "Sofa\\Eloquence\\Contracts\\Metable::hasMeta", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getMeta", "name": "Sofa\\Eloquence\\Contracts\\Metable::getMeta", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_setMeta", "name": "Sofa\\Eloquence\\Contracts\\Metable::setMeta", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Metable", "fromLink": "Sofa/Eloquence/Contracts/Metable.html", "link": "Sofa/Eloquence/Contracts/Metable.html#method_getAllowedMeta", "name": "Sofa\\Eloquence\\Contracts\\Metable::getAllowedMeta", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Mutator.html", "name": "Sofa\\Eloquence\\Contracts\\Mutator", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Mutator", "fromLink": "Sofa/Eloquence/Contracts/Mutator.html", "link": "Sofa/Eloquence/Contracts/Mutator.html#method_mutate", "name": "Sofa\\Eloquence\\Contracts\\Mutator::mutate", "doc": "&quot;Mutate value using provided methods.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html", "name": "Sofa\\Eloquence\\Contracts\\Pipeline", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Pipeline", "fromLink": "Sofa/Eloquence/Contracts/Pipeline.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html#method_send", "name": "Sofa\\Eloquence\\Contracts\\Pipeline::send", "doc": "&quot;Specify the parcel to be passed through pipeline.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Pipeline", "fromLink": "Sofa/Eloquence/Contracts/Pipeline.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html#method_through", "name": "Sofa\\Eloquence\\Contracts\\Pipeline::through", "doc": "&quot;Specify the actions the parcel will be passed through.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Pipeline", "fromLink": "Sofa/Eloquence/Contracts/Pipeline.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html#method_with", "name": "Sofa\\Eloquence\\Contracts\\Pipeline::with", "doc": "&quot;Add the arguments to be passed along with the parcel.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Pipeline", "fromLink": "Sofa/Eloquence/Contracts/Pipeline.html", "link": "Sofa/Eloquence/Contracts/Pipeline.html#method_to", "name": "Sofa\\Eloquence\\Contracts\\Pipeline::to", "doc": "&quot;Dispatch the parcel and call the final callback at the end.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts\\Relations", "fromLink": "Sofa/Eloquence/Contracts/Relations.html", "link": "Sofa/Eloquence/Contracts/Relations/Joiner.html", "name": "Sofa\\Eloquence\\Contracts\\Relations\\Joiner", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Relations\\Joiner", "fromLink": "Sofa/Eloquence/Contracts/Relations/Joiner.html", "link": "Sofa/Eloquence/Contracts/Relations/Joiner.html#method_join", "name": "Sofa\\Eloquence\\Contracts\\Relations\\Joiner::join", "doc": "&quot;Join tables of the provided relations and return related model.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts\\Relations", "fromLink": "Sofa/Eloquence/Contracts/Relations.html", "link": "Sofa/Eloquence/Contracts/Relations/JoinerFactory.html", "name": "Sofa\\Eloquence\\Contracts\\Relations\\JoinerFactory", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Relations\\JoinerFactory", "fromLink": "Sofa/Eloquence/Contracts/Relations/JoinerFactory.html", "link": "Sofa/Eloquence/Contracts/Relations/JoinerFactory.html#method_make", "name": "Sofa\\Eloquence\\Contracts\\Relations\\JoinerFactory::make", "doc": "&quot;Create new joiner instance.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable", "fromLink": "Sofa/Eloquence/Contracts/Searchable.html", "link": "Sofa/Eloquence/Contracts/Searchable/Parser.html", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Contracts/Searchable/Parser.html", "link": "Sofa/Eloquence/Contracts/Searchable/Parser.html#method_parseQuery", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser::parseQuery", "doc": "&quot;Parse query string into separate words with wildcards if applicable.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Contracts/Searchable/Parser.html", "link": "Sofa/Eloquence/Contracts/Searchable/Parser.html#method_stripWildcards", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser::stripWildcards", "doc": "&quot;Strip wildcard tokens from the word.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Contracts/Searchable/Parser.html", "link": "Sofa/Eloquence/Contracts/Searchable/Parser.html#method_parseWeights", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\Parser::parseWeights", "doc": "&quot;Parse searchable columns.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable", "fromLink": "Sofa/Eloquence/Contracts/Searchable.html", "link": "Sofa/Eloquence/Contracts/Searchable/ParserFactory.html", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\ParserFactory", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Searchable\\ParserFactory", "fromLink": "Sofa/Eloquence/Contracts/Searchable/ParserFactory.html", "link": "Sofa/Eloquence/Contracts/Searchable/ParserFactory.html#method_make", "name": "Sofa\\Eloquence\\Contracts\\Searchable\\ParserFactory::make", "doc": "&quot;Create new parser instance.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Contracts", "fromLink": "Sofa/Eloquence/Contracts.html", "link": "Sofa/Eloquence/Contracts/Validable.html", "name": "Sofa\\Eloquence\\Contracts\\Validable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getDirty", "name": "Sofa\\Eloquence\\Contracts\\Validable::getDirty", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_isValid", "name": "Sofa\\Eloquence\\Contracts\\Validable::isValid", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_enableValidation", "name": "Sofa\\Eloquence\\Contracts\\Validable::enableValidation", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_disableValidation", "name": "Sofa\\Eloquence\\Contracts\\Validable::disableValidation", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_validationEnabled", "name": "Sofa\\Eloquence\\Contracts\\Validable::validationEnabled", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_skipsValidation", "name": "Sofa\\Eloquence\\Contracts\\Validable::skipsValidation", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getValidationErrors", "name": "Sofa\\Eloquence\\Contracts\\Validable::getValidationErrors", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getInvalidAttributes", "name": "Sofa\\Eloquence\\Contracts\\Validable::getInvalidAttributes", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getValidator", "name": "Sofa\\Eloquence\\Contracts\\Validable::getValidator", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getUpdateRules", "name": "Sofa\\Eloquence\\Contracts\\Validable::getUpdateRules", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Contracts\\Validable", "fromLink": "Sofa/Eloquence/Contracts/Validable.html", "link": "Sofa/Eloquence/Contracts/Validable.html#method_getCreateRules", "name": "Sofa\\Eloquence\\Contracts\\Validable::getCreateRules", "doc": "&quot;\n&quot;"},
            
            {"type": "Trait", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html", "name": "Sofa\\Eloquence\\Eloquence", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_bootEloquence", "name": "Sofa\\Eloquence\\Eloquence::bootEloquence", "doc": "&quot;Boot the trait.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_hook", "name": "Sofa\\Eloquence\\Eloquence::hook", "doc": "&quot;Register hook on Eloquent method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_hasHook", "name": "Sofa\\Eloquence\\Eloquence::hasHook", "doc": "&quot;Determine whether a method has any hooks registered.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_parseMappedColumn", "name": "Sofa\\Eloquence\\Eloquence::parseMappedColumn", "doc": "&quot;Get the target relation and column from the mapping.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_hasColumn", "name": "Sofa\\Eloquence\\Eloquence::hasColumn", "doc": "&quot;Determine whether the key is meta attribute or actual table field.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_getSearchableColumns", "name": "Sofa\\Eloquence\\Eloquence::getSearchableColumns", "doc": "&quot;Get searchable columns defined on the model.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_getColumnListing", "name": "Sofa\\Eloquence\\Eloquence::getColumnListing", "doc": "&quot;Get model table columns.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_newEloquentBuilder", "name": "Sofa\\Eloquence\\Eloquence::newEloquentBuilder", "doc": "&quot;Create new Eloquence query builder for the instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_setAttributeMutator", "name": "Sofa\\Eloquence\\Eloquence::setAttributeMutator", "doc": "&quot;Set attribute mutator instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_getAttributeMutator", "name": "Sofa\\Eloquence\\Eloquence::getAttributeMutator", "doc": "&quot;Get attribute mutator instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_queryHook", "name": "Sofa\\Eloquence\\Eloquence::queryHook", "doc": "&quot;Allow custom where method calls on the builder.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_getAttribute", "name": "Sofa\\Eloquence\\Eloquence::getAttribute", "doc": "&quot;Register hook for getAttribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_setAttribute", "name": "Sofa\\Eloquence\\Eloquence::setAttribute", "doc": "&quot;Register hook for setAttribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_save", "name": "Sofa\\Eloquence\\Eloquence::save", "doc": "&quot;Register hook for save.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_toArray", "name": "Sofa\\Eloquence\\Eloquence::toArray", "doc": "&quot;Register hook for toArray.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_replicate", "name": "Sofa\\Eloquence\\Eloquence::replicate", "doc": "&quot;Register hook for replicate.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method___isset", "name": "Sofa\\Eloquence\\Eloquence::__isset", "doc": "&quot;Register hook for isset call.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method___unset", "name": "Sofa\\Eloquence\\Eloquence::__unset", "doc": "&quot;Register hook for isset call.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_getConnection", "name": "Sofa\\Eloquence\\Eloquence::getConnection", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Eloquence", "fromLink": "Sofa/Eloquence/Eloquence.html", "link": "Sofa/Eloquence/Eloquence.html#method_getTable", "name": "Sofa\\Eloquence\\Eloquence::getTable", "doc": "&quot;\n&quot;"},
            
            {"type": "Trait", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/Mappable.html", "name": "Sofa\\Eloquence\\Mappable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method_bootMappable", "name": "Sofa\\Eloquence\\Mappable::bootMappable", "doc": "&quot;Register hooks for the trait.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method_queryHookMappable", "name": "Sofa\\Eloquence\\Mappable::queryHookMappable", "doc": "&quot;Register hook on customWhere method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method_getMappingForAttribute", "name": "Sofa\\Eloquence\\Mappable::getMappingForAttribute", "doc": "&quot;Get the mapping key.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method_hasMapping", "name": "Sofa\\Eloquence\\Mappable::hasMapping", "doc": "&quot;Determine whether a mapping exists for an attribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method_getAttributeMappable", "name": "Sofa\\Eloquence\\Mappable::getAttributeMappable", "doc": "&quot;Register hook on getAttribute method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method_setAttributeMappable", "name": "Sofa\\Eloquence\\Mappable::setAttributeMappable", "doc": "&quot;Register hook on setAttribute method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method_saveMappable", "name": "Sofa\\Eloquence\\Mappable::saveMappable", "doc": "&quot;Register hook on save method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method___issetMappable", "name": "Sofa\\Eloquence\\Mappable::__issetMappable", "doc": "&quot;Register hook on isset call.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method___unsetMappable", "name": "Sofa\\Eloquence\\Mappable::__unsetMappable", "doc": "&quot;Register hook on unset call.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mappable", "fromLink": "Sofa/Eloquence/Mappable.html", "link": "Sofa/Eloquence/Mappable.html#method_getMaps", "name": "Sofa\\Eloquence\\Mappable::getMaps", "doc": "&quot;Get the array of attribute mappings.&quot;"},
            
            {"type": "Trait", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/Metable.html", "name": "Sofa\\Eloquence\\Metable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_bootMetable", "name": "Sofa\\Eloquence\\Metable::bootMetable", "doc": "&quot;Register hooks for the trait.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_getAttributeMetable", "name": "Sofa\\Eloquence\\Metable::getAttributeMetable", "doc": "&quot;Register hook on getAttribute method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_setAttributeMetable", "name": "Sofa\\Eloquence\\Metable::setAttributeMetable", "doc": "&quot;Register hook on setAttribute method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_toArrayMetable", "name": "Sofa\\Eloquence\\Metable::toArrayMetable", "doc": "&quot;Register hook on toArray method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_replicateMetable", "name": "Sofa\\Eloquence\\Metable::replicateMetable", "doc": "&quot;Register hook on replicate method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_saveMetable", "name": "Sofa\\Eloquence\\Metable::saveMetable", "doc": "&quot;Register hook on save method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method___issetMetable", "name": "Sofa\\Eloquence\\Metable::__issetMetable", "doc": "&quot;Register hook on isset call.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method___unsetMetable", "name": "Sofa\\Eloquence\\Metable::__unsetMetable", "doc": "&quot;Register hook on unset call.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_queryHookMetable", "name": "Sofa\\Eloquence\\Metable::queryHookMetable", "doc": "&quot;Register hook on queryHook method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_allowsMeta", "name": "Sofa\\Eloquence\\Metable::allowsMeta", "doc": "&quot;Determine whether meta attribute is allowed for the model.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_hasMeta", "name": "Sofa\\Eloquence\\Metable::hasMeta", "doc": "&quot;Determine whether meta attribute exists on the model.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_getMeta", "name": "Sofa\\Eloquence\\Metable::getMeta", "doc": "&quot;Get meta attribute value.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_setMeta", "name": "Sofa\\Eloquence\\Metable::setMeta", "doc": "&quot;Set meta attribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_metaAttributes", "name": "Sofa\\Eloquence\\Metable::metaAttributes", "doc": "&quot;Meta attributes relation.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_getMetaAttributes", "name": "Sofa\\Eloquence\\Metable::getMetaAttributes", "doc": "&quot;Get meta attributes as collection.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_getMetaAttributesAttribute", "name": "Sofa\\Eloquence\\Metable::getMetaAttributesAttribute", "doc": "&quot;Accessor for metaAttributes property&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_getMetaAttributesArray", "name": "Sofa\\Eloquence\\Metable::getMetaAttributesArray", "doc": "&quot;Get meta attributes as associative array.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable.html#method_getAllowedMeta", "name": "Sofa\\Eloquence\\Metable::getAllowedMeta", "doc": "&quot;Get allowed meta attributes array.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable/Attribute.html", "name": "Sofa\\Eloquence\\Metable\\Attribute", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\Attribute", "fromLink": "Sofa/Eloquence/Metable/Attribute.html", "link": "Sofa/Eloquence/Metable/Attribute.html#method___construct", "name": "Sofa\\Eloquence\\Metable\\Attribute::__construct", "doc": "&quot;Create new attribute instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\Attribute", "fromLink": "Sofa/Eloquence/Metable/Attribute.html", "link": "Sofa/Eloquence/Metable/Attribute.html#method_newBag", "name": "Sofa\\Eloquence\\Metable\\Attribute::newBag", "doc": "&quot;Create new AttributeBag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\Attribute", "fromLink": "Sofa/Eloquence/Metable/Attribute.html", "link": "Sofa/Eloquence/Metable/Attribute.html#method_getValue", "name": "Sofa\\Eloquence\\Metable\\Attribute::getValue", "doc": "&quot;Get the meta attribute value.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\Attribute", "fromLink": "Sofa/Eloquence/Metable/Attribute.html", "link": "Sofa/Eloquence/Metable/Attribute.html#method_getMetaKey", "name": "Sofa\\Eloquence\\Metable\\Attribute::getMetaKey", "doc": "&quot;Get the meta attribute key.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\Attribute", "fromLink": "Sofa/Eloquence/Metable/Attribute.html", "link": "Sofa/Eloquence/Metable/Attribute.html#method_setValue", "name": "Sofa\\Eloquence\\Metable\\Attribute::setValue", "doc": "&quot;Set value of the meta attribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\Attribute", "fromLink": "Sofa/Eloquence/Metable/Attribute.html", "link": "Sofa/Eloquence/Metable/Attribute.html#method_getTable", "name": "Sofa\\Eloquence\\Metable\\Attribute::getTable", "doc": "&quot;Allow custom table name for meta attributes via config.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\Attribute", "fromLink": "Sofa/Eloquence/Metable/Attribute.html", "link": "Sofa/Eloquence/Metable/Attribute.html#method_setCustomTable", "name": "Sofa\\Eloquence\\Metable\\Attribute::setCustomTable", "doc": "&quot;Set custom table for the meta attributes. Allows doing it only once\nin order to mimic protected behaviour, most likely in the service\nprovider, which in turn gets the table name from configuration.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\Attribute", "fromLink": "Sofa/Eloquence/Metable/Attribute.html", "link": "Sofa/Eloquence/Metable/Attribute.html#method_castToString", "name": "Sofa\\Eloquence\\Metable\\Attribute::castToString", "doc": "&quot;Handle casting value to string.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\Attribute", "fromLink": "Sofa/Eloquence/Metable/Attribute.html", "link": "Sofa/Eloquence/Metable/Attribute.html#method___toString", "name": "Sofa\\Eloquence\\Metable\\Attribute::__toString", "doc": "&quot;Handle dynamic casting to string.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html", "name": "Sofa\\Eloquence\\Metable\\AttributeBag", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method___construct", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::__construct", "doc": "&quot;Create new AttributeBag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method_set", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::set", "doc": "&quot;Add or update attribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method_add", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::add", "doc": "&quot;Set attribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method_getValue", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::getValue", "doc": "&quot;Get attribute value.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method_forget", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::forget", "doc": "&quot;Unset attribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method_offsetSet", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::offsetSet", "doc": "&quot;Set attribute.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method_offsetUnset", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::offsetUnset", "doc": "&quot;Set attribute to null.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method___set", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::__set", "doc": "&quot;Handle dynamic properties.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method___get", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::__get", "doc": "&quot;Handle dynamic properties.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method___isset", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::__isset", "doc": "&quot;Handle isset calls.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method___unset", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::__unset", "doc": "&quot;Handle unset calls.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\AttributeBag", "fromLink": "Sofa/Eloquence/Metable/AttributeBag.html", "link": "Sofa/Eloquence/Metable/AttributeBag.html#method_replicate", "name": "Sofa\\Eloquence\\Metable\\AttributeBag::replicate", "doc": "&quot;Create copy of the attribute bag.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable/CreateMetaAttributesTable.html", "name": "Sofa\\Eloquence\\Metable\\CreateMetaAttributesTable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\CreateMetaAttributesTable", "fromLink": "Sofa/Eloquence/Metable/CreateMetaAttributesTable.html", "link": "Sofa/Eloquence/Metable/CreateMetaAttributesTable.html#method_up", "name": "Sofa\\Eloquence\\Metable\\CreateMetaAttributesTable::up", "doc": "&quot;Run the migrations.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Metable\\CreateMetaAttributesTable", "fromLink": "Sofa/Eloquence/Metable/CreateMetaAttributesTable.html", "link": "Sofa/Eloquence/Metable/CreateMetaAttributesTable.html#method_down", "name": "Sofa\\Eloquence\\Metable\\CreateMetaAttributesTable::down", "doc": "&quot;Reverse the migrations.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable/InvalidMutatorException.html", "name": "Sofa\\Eloquence\\Metable\\InvalidMutatorException", "doc": "&quot;\n&quot;"},
                    
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Metable", "fromLink": "Sofa/Eloquence/Metable.html", "link": "Sofa/Eloquence/Metable/InvalidTypeException.html", "name": "Sofa\\Eloquence\\Metable\\InvalidTypeException", "doc": "&quot;\n&quot;"},
                    
            {"type": "Class", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/Model.html", "name": "Sofa\\Eloquence\\Model", "doc": "&quot;\n&quot;"},
                    
            {"type": "Trait", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/Mutable.html", "name": "Sofa\\Eloquence\\Mutable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Mutable", "fromLink": "Sofa/Eloquence/Mutable.html", "link": "Sofa/Eloquence/Mutable.html#method_bootMutable", "name": "Sofa\\Eloquence\\Mutable::bootMutable", "doc": "&quot;Register hooks for the trait.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mutable", "fromLink": "Sofa/Eloquence/Mutable.html", "link": "Sofa/Eloquence/Mutable.html#method_getAttributeMutable", "name": "Sofa\\Eloquence\\Mutable::getAttributeMutable", "doc": "&quot;Register hook on getAttribute method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mutable", "fromLink": "Sofa/Eloquence/Mutable.html", "link": "Sofa/Eloquence/Mutable.html#method_setAttributeMutable", "name": "Sofa\\Eloquence\\Mutable::setAttributeMutable", "doc": "&quot;Register hook on setAttribute method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mutable", "fromLink": "Sofa/Eloquence/Mutable.html", "link": "Sofa/Eloquence/Mutable.html#method_toArrayMutable", "name": "Sofa\\Eloquence\\Mutable::toArrayMutable", "doc": "&quot;Register hook on toArray method.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mutable", "fromLink": "Sofa/Eloquence/Mutable.html", "link": "Sofa/Eloquence/Mutable.html#method_hasGetterMutator", "name": "Sofa\\Eloquence\\Mutable::hasGetterMutator", "doc": "&quot;Determine whether an attribute has getter mutators defined.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mutable", "fromLink": "Sofa/Eloquence/Mutable.html", "link": "Sofa/Eloquence/Mutable.html#method_hasSetterMutator", "name": "Sofa\\Eloquence\\Mutable::hasSetterMutator", "doc": "&quot;Determine whether an attribute has setter mutators defined.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Mutable", "fromLink": "Sofa/Eloquence/Mutable.html", "link": "Sofa/Eloquence/Mutable.html#method_getMutators", "name": "Sofa\\Eloquence\\Mutable::getMutators", "doc": "&quot;Get the array of attribute mutators.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Mutator", "fromLink": "Sofa/Eloquence/Mutator.html", "link": "Sofa/Eloquence/Mutator/InvalidCallableException.html", "name": "Sofa\\Eloquence\\Mutator\\InvalidCallableException", "doc": "&quot;\n&quot;"},
                    
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Mutator", "fromLink": "Sofa/Eloquence/Mutator.html", "link": "Sofa/Eloquence/Mutator/Mutator.html", "name": "Sofa\\Eloquence\\Mutator\\Mutator", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Mutator\\Mutator", "fromLink": "Sofa/Eloquence/Mutator/Mutator.html", "link": "Sofa/Eloquence/Mutator/Mutator.html#method_mutate", "name": "Sofa\\Eloquence\\Mutator\\Mutator::mutate", "doc": "&quot;Mutate value using provided methods.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Pipeline", "fromLink": "Sofa/Eloquence/Pipeline.html", "link": "Sofa/Eloquence/Pipeline/Pipeline.html", "name": "Sofa\\Eloquence\\Pipeline\\Pipeline", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Pipeline\\Pipeline", "fromLink": "Sofa/Eloquence/Pipeline/Pipeline.html", "link": "Sofa/Eloquence/Pipeline/Pipeline.html#method___construct", "name": "Sofa\\Eloquence\\Pipeline\\Pipeline::__construct", "doc": "&quot;Create new pipeline.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Pipeline\\Pipeline", "fromLink": "Sofa/Eloquence/Pipeline/Pipeline.html", "link": "Sofa/Eloquence/Pipeline/Pipeline.html#method_send", "name": "Sofa\\Eloquence\\Pipeline\\Pipeline::send", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Pipeline\\Pipeline", "fromLink": "Sofa/Eloquence/Pipeline/Pipeline.html", "link": "Sofa/Eloquence/Pipeline/Pipeline.html#method_through", "name": "Sofa\\Eloquence\\Pipeline\\Pipeline::through", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Pipeline\\Pipeline", "fromLink": "Sofa/Eloquence/Pipeline/Pipeline.html", "link": "Sofa/Eloquence/Pipeline/Pipeline.html#method_with", "name": "Sofa\\Eloquence\\Pipeline\\Pipeline::with", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Pipeline\\Pipeline", "fromLink": "Sofa/Eloquence/Pipeline/Pipeline.html", "link": "Sofa/Eloquence/Pipeline/Pipeline.html#method_to", "name": "Sofa\\Eloquence\\Pipeline\\Pipeline::to", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Relations", "fromLink": "Sofa/Eloquence/Relations.html", "link": "Sofa/Eloquence/Relations/Joiner.html", "name": "Sofa\\Eloquence\\Relations\\Joiner", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Relations\\Joiner", "fromLink": "Sofa/Eloquence/Relations/Joiner.html", "link": "Sofa/Eloquence/Relations/Joiner.html#method___construct", "name": "Sofa\\Eloquence\\Relations\\Joiner::__construct", "doc": "&quot;Create new joiner instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Relations\\Joiner", "fromLink": "Sofa/Eloquence/Relations/Joiner.html", "link": "Sofa/Eloquence/Relations/Joiner.html#method_join", "name": "Sofa\\Eloquence\\Relations\\Joiner::join", "doc": "&quot;Join related tables.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Relations\\Joiner", "fromLink": "Sofa/Eloquence/Relations/Joiner.html", "link": "Sofa/Eloquence/Relations/Joiner.html#method_leftJoin", "name": "Sofa\\Eloquence\\Relations\\Joiner::leftJoin", "doc": "&quot;Left join related tables.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Relations\\Joiner", "fromLink": "Sofa/Eloquence/Relations/Joiner.html", "link": "Sofa/Eloquence/Relations/Joiner.html#method_rightJoin", "name": "Sofa\\Eloquence\\Relations\\Joiner::rightJoin", "doc": "&quot;Right join related tables.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Relations", "fromLink": "Sofa/Eloquence/Relations.html", "link": "Sofa/Eloquence/Relations/JoinerFactory.html", "name": "Sofa\\Eloquence\\Relations\\JoinerFactory", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Relations\\JoinerFactory", "fromLink": "Sofa/Eloquence/Relations/JoinerFactory.html", "link": "Sofa/Eloquence/Relations/JoinerFactory.html#method_make", "name": "Sofa\\Eloquence\\Relations\\JoinerFactory::make", "doc": "&quot;Create new joiner instance.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Searchable", "fromLink": "Sofa/Eloquence/Searchable.html", "link": "Sofa/Eloquence/Searchable/Column.html", "name": "Sofa\\Eloquence\\Searchable\\Column", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Column", "fromLink": "Sofa/Eloquence/Searchable/Column.html", "link": "Sofa/Eloquence/Searchable/Column.html#method___construct", "name": "Sofa\\Eloquence\\Searchable\\Column::__construct", "doc": "&quot;Create new searchable column instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Column", "fromLink": "Sofa/Eloquence/Searchable/Column.html", "link": "Sofa/Eloquence/Searchable/Column.html#method_getWrapped", "name": "Sofa\\Eloquence\\Searchable\\Column::getWrapped", "doc": "&quot;Get qualified name wrapped by the grammar.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Column", "fromLink": "Sofa/Eloquence/Searchable/Column.html", "link": "Sofa/Eloquence/Searchable/Column.html#method_getQualifiedName", "name": "Sofa\\Eloquence\\Searchable\\Column::getQualifiedName", "doc": "&quot;Get column name with table prefix.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Column", "fromLink": "Sofa/Eloquence/Searchable/Column.html", "link": "Sofa/Eloquence/Searchable/Column.html#method_getTable", "name": "Sofa\\Eloquence\\Searchable\\Column::getTable", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Column", "fromLink": "Sofa/Eloquence/Searchable/Column.html", "link": "Sofa/Eloquence/Searchable/Column.html#method_getName", "name": "Sofa\\Eloquence\\Searchable\\Column::getName", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Column", "fromLink": "Sofa/Eloquence/Searchable/Column.html", "link": "Sofa/Eloquence/Searchable/Column.html#method_getMapping", "name": "Sofa\\Eloquence\\Searchable\\Column::getMapping", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Column", "fromLink": "Sofa/Eloquence/Searchable/Column.html", "link": "Sofa/Eloquence/Searchable/Column.html#method_getWeight", "name": "Sofa\\Eloquence\\Searchable\\Column::getWeight", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Searchable", "fromLink": "Sofa/Eloquence/Searchable.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method___construct", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::__construct", "doc": "&quot;Create new searchable columns collection.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_getColumns", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::getColumns", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_add", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::add", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_getQualifiedNames", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::getQualifiedNames", "doc": "&quot;Get array of qualified columns names.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_getTables", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::getTables", "doc": "&quot;Get array of tables names.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_getWeights", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::getWeights", "doc": "&quot;Get array of columns mappings and weights.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_getMappings", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::getMappings", "doc": "&quot;Get array of columns mappings.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_offsetExists", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::offsetExists", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_offsetGet", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::offsetGet", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_offsetSet", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::offsetSet", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_offsetUnset", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::offsetUnset", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ColumnCollection", "fromLink": "Sofa/Eloquence/Searchable/ColumnCollection.html", "link": "Sofa/Eloquence/Searchable/ColumnCollection.html#method_getIterator", "name": "Sofa\\Eloquence\\Searchable\\ColumnCollection::getIterator", "doc": "&quot;Get an iterator for the columns.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Searchable", "fromLink": "Sofa/Eloquence/Searchable.html", "link": "Sofa/Eloquence/Searchable/Parser.html", "name": "Sofa\\Eloquence\\Searchable\\Parser", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Searchable/Parser.html", "link": "Sofa/Eloquence/Searchable/Parser.html#method___construct", "name": "Sofa\\Eloquence\\Searchable\\Parser::__construct", "doc": "&quot;Create new parser instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Searchable/Parser.html", "link": "Sofa/Eloquence/Searchable/Parser.html#method_parseWeights", "name": "Sofa\\Eloquence\\Searchable\\Parser::parseWeights", "doc": "&quot;Parse searchable columns.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Searchable/Parser.html", "link": "Sofa/Eloquence/Searchable/Parser.html#method_stripWildcards", "name": "Sofa\\Eloquence\\Searchable\\Parser::stripWildcards", "doc": "&quot;Strip wildcard tokens from the word.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\Parser", "fromLink": "Sofa/Eloquence/Searchable/Parser.html", "link": "Sofa/Eloquence/Searchable/Parser.html#method_parseQuery", "name": "Sofa\\Eloquence\\Searchable\\Parser::parseQuery", "doc": "&quot;Parse query string into separate words with wildcards if applicable.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Searchable", "fromLink": "Sofa/Eloquence/Searchable.html", "link": "Sofa/Eloquence/Searchable/ParserFactory.html", "name": "Sofa\\Eloquence\\Searchable\\ParserFactory", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Searchable\\ParserFactory", "fromLink": "Sofa/Eloquence/Searchable/ParserFactory.html", "link": "Sofa/Eloquence/Searchable/ParserFactory.html#method_make", "name": "Sofa\\Eloquence\\Searchable\\ParserFactory::make", "doc": "&quot;Create new parser instance.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Searchable", "fromLink": "Sofa/Eloquence/Searchable.html", "link": "Sofa/Eloquence/Searchable/Searchable.html", "name": "Sofa\\Eloquence\\Searchable\\Searchable", "doc": "&quot;\n&quot;"},
                    
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Searchable", "fromLink": "Sofa/Eloquence/Searchable.html", "link": "Sofa/Eloquence/Searchable/Subquery.html", "name": "Sofa\\Eloquence\\Searchable\\Subquery", "doc": "&quot;\n&quot;"},
                    
            {"type": "Class", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/ServiceProvider.html", "name": "Sofa\\Eloquence\\ServiceProvider", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\ServiceProvider", "fromLink": "Sofa/Eloquence/ServiceProvider.html", "link": "Sofa/Eloquence/ServiceProvider.html#method_boot", "name": "Sofa\\Eloquence\\ServiceProvider::boot", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\ServiceProvider", "fromLink": "Sofa/Eloquence/ServiceProvider.html", "link": "Sofa/Eloquence/ServiceProvider.html#method_register", "name": "Sofa\\Eloquence\\ServiceProvider::register", "doc": "&quot;Register the service provider.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\ServiceProvider", "fromLink": "Sofa/Eloquence/ServiceProvider.html", "link": "Sofa/Eloquence/ServiceProvider.html#method_provides", "name": "Sofa\\Eloquence\\ServiceProvider::provides", "doc": "&quot;Get the services provided by the provider.&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/Subquery.html", "name": "Sofa\\Eloquence\\Subquery", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Subquery", "fromLink": "Sofa/Eloquence/Subquery.html", "link": "Sofa/Eloquence/Subquery.html#method___construct", "name": "Sofa\\Eloquence\\Subquery::__construct", "doc": "&quot;Create new subquery instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Subquery", "fromLink": "Sofa/Eloquence/Subquery.html", "link": "Sofa/Eloquence/Subquery.html#method_setQuery", "name": "Sofa\\Eloquence\\Subquery::setQuery", "doc": "&quot;Set underlying query builder.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Subquery", "fromLink": "Sofa/Eloquence/Subquery.html", "link": "Sofa/Eloquence/Subquery.html#method_getQuery", "name": "Sofa\\Eloquence\\Subquery::getQuery", "doc": "&quot;Get underlying query builder.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Subquery", "fromLink": "Sofa/Eloquence/Subquery.html", "link": "Sofa/Eloquence/Subquery.html#method_getValue", "name": "Sofa\\Eloquence\\Subquery::getValue", "doc": "&quot;Evaluate query as string.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Subquery", "fromLink": "Sofa/Eloquence/Subquery.html", "link": "Sofa/Eloquence/Subquery.html#method_getAlias", "name": "Sofa\\Eloquence\\Subquery::getAlias", "doc": "&quot;Get subquery alias.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Subquery", "fromLink": "Sofa/Eloquence/Subquery.html", "link": "Sofa/Eloquence/Subquery.html#method_setAlias", "name": "Sofa\\Eloquence\\Subquery::setAlias", "doc": "&quot;Set subquery alias.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Subquery", "fromLink": "Sofa/Eloquence/Subquery.html", "link": "Sofa/Eloquence/Subquery.html#method___set", "name": "Sofa\\Eloquence\\Subquery::__set", "doc": "&quot;Pass property calls to the underlying builder.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Subquery", "fromLink": "Sofa/Eloquence/Subquery.html", "link": "Sofa/Eloquence/Subquery.html#method___get", "name": "Sofa\\Eloquence\\Subquery::__get", "doc": "&quot;Pass property calls to the underlying builder.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Subquery", "fromLink": "Sofa/Eloquence/Subquery.html", "link": "Sofa/Eloquence/Subquery.html#method___call", "name": "Sofa\\Eloquence\\Subquery::__call", "doc": "&quot;Pass method calls to the underlying builder.&quot;"},
            
            {"type": "Trait", "fromName": "Sofa\\Eloquence", "fromLink": "Sofa/Eloquence.html", "link": "Sofa/Eloquence/Validable.html", "name": "Sofa\\Eloquence\\Validable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_bootValidable", "name": "Sofa\\Eloquence\\Validable::bootValidable", "doc": "&quot;Register hooks for the trait.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_isValid", "name": "Sofa\\Eloquence\\Validable::isValid", "doc": "&quot;Determine whether all the attributes on this instance pass validation.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_skipValidation", "name": "Sofa\\Eloquence\\Validable::skipValidation", "doc": "&quot;Skip validation on the next saving attempt.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_disableValidation", "name": "Sofa\\Eloquence\\Validable::disableValidation", "doc": "&quot;Disable validation for this instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_enableValidation", "name": "Sofa\\Eloquence\\Validable::enableValidation", "doc": "&quot;Enable validation for this instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_skipsValidation", "name": "Sofa\\Eloquence\\Validable::skipsValidation", "doc": "&quot;Get current validation flag.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_validationEnabled", "name": "Sofa\\Eloquence\\Validable::validationEnabled", "doc": "&quot;Determine whether validation is enabled for this instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getValidationErrors", "name": "Sofa\\Eloquence\\Validable::getValidationErrors", "doc": "&quot;Retrieve validation error messages.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getMessageBag", "name": "Sofa\\Eloquence\\Validable::getMessageBag", "doc": "&quot;Retrieve validation error messages.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getInvalidAttributes", "name": "Sofa\\Eloquence\\Validable::getInvalidAttributes", "doc": "&quot;Get names of the attributes that didn&#039;t pass validation.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getValidator", "name": "Sofa\\Eloquence\\Validable::getValidator", "doc": "&quot;Get the validator instance.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getValidationMessages", "name": "Sofa\\Eloquence\\Validable::getValidationMessages", "doc": "&quot;Get custom validation messages.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getValidationAttributes", "name": "Sofa\\Eloquence\\Validable::getValidationAttributes", "doc": "&quot;Get custom validation attribute names.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getCreateRules", "name": "Sofa\\Eloquence\\Validable::getCreateRules", "doc": "&quot;Get all the validation rules for this model.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getUpdateRules", "name": "Sofa\\Eloquence\\Validable::getUpdateRules", "doc": "&quot;Get all validation rules for update on this model.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getUpdateRulesForId", "name": "Sofa\\Eloquence\\Validable::getUpdateRulesForId", "doc": "&quot;Get all validation rules for update for given id.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getValidatedFields", "name": "Sofa\\Eloquence\\Validable::getValidatedFields", "doc": "&quot;Get array of attributes that have validation rules defined.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_setValidatorFactory", "name": "Sofa\\Eloquence\\Validable::setValidatorFactory", "doc": "&quot;Set validation factory instance for this model.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getKey", "name": "Sofa\\Eloquence\\Validable::getKey", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable.html#method_getKeyName", "name": "Sofa\\Eloquence\\Validable::getKeyName", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Sofa\\Eloquence\\Validable", "fromLink": "Sofa/Eloquence/Validable.html", "link": "Sofa/Eloquence/Validable/Observer.html", "name": "Sofa\\Eloquence\\Validable\\Observer", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable\\Observer", "fromLink": "Sofa/Eloquence/Validable/Observer.html", "link": "Sofa/Eloquence/Validable/Observer.html#method_creating", "name": "Sofa\\Eloquence\\Validable\\Observer::creating", "doc": "&quot;Halt creating if model doesn&#039;t pass validation.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable\\Observer", "fromLink": "Sofa/Eloquence/Validable/Observer.html", "link": "Sofa/Eloquence/Validable/Observer.html#method_updating", "name": "Sofa\\Eloquence\\Validable\\Observer::updating", "doc": "&quot;Updating event handler.&quot;"},
                    {"type": "Method", "fromName": "Sofa\\Eloquence\\Validable\\Observer", "fromLink": "Sofa/Eloquence/Validable/Observer.html", "link": "Sofa/Eloquence/Validable/Observer.html#method_saved", "name": "Sofa\\Eloquence\\Validable\\Observer::saved", "doc": "&quot;Enable validation for the model if skipped only once.&quot;"},
            
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


